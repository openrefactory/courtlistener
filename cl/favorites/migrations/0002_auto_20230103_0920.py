# Generated by Django 3.2.16 on 2023-01-03 17:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pghistory', '0005_events_middlewareevents'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('search', '0009_alter_court_jurisdiction'),
        ('audio', '0001_initial'),
        ('favorites', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocketTagEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FavoriteEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The original creation date for the item')),
                ('date_modified', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=100, verbose_name='a name for the alert')),
                ('notes', models.TextField(blank=True, max_length=500, validators=[django.core.validators.MaxLengthValidator(500)], verbose_name='notes about the favorite')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrayerEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The time when this item was created')),
                ('status', models.SmallIntegerField(choices=[(1, 'Still waiting for the document.'), (2, 'Prayer has been granted.')], default=1, help_text='Whether the prayer has been granted or is still waiting.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTagEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='The moment when the item was created.')),
                ('date_modified', models.DateTimeField(auto_now=True, help_text='The last moment when the item was modified. A value in year 1750 indicates the value is unknown')),
                ('name', models.SlugField(db_index=False, help_text='The name of the tag')),
                ('title', models.TextField(blank=True, help_text='A title for the tag')),
                ('description', models.TextField(blank=True, help_text='The description of the tag in Markdown format')),
                ('view_count', models.IntegerField(default=0, help_text='The number of times the URL for the tag has been seen.')),
                ('published', models.BooleanField(default=False, help_text='Whether the tag has been shared publicly.')),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dockettag',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "favorites_dockettagevent" ("docket_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "tag_id") VALUES (NEW."docket_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."tag_id"); RETURN NULL;', hash='29317d5fa7f67f1673d3e8629f95ad1d4611680a', operation='INSERT', pgid='pgtrigger_snapshot_insert_d9def', table='favorites_dockettag', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='dockettag',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "favorites_dockettagevent" ("docket_id", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "tag_id") VALUES (NEW."docket_id", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."tag_id"); RETURN NULL;', hash='741d5f0b8e26c83cdc757b4924fbd3cc22a7ecfc', operation='UPDATE', pgid='pgtrigger_snapshot_update_2cb4a', table='favorites_dockettag', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='favorite',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "favorites_favoriteevent" ("audio_id_id", "cluster_id_id", "date_created", "date_modified", "docket_id_id", "id", "name", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "recap_doc_id_id", "user_id") VALUES (NEW."audio_id_id", NEW."cluster_id_id", NEW."date_created", NEW."date_modified", NEW."docket_id_id", NEW."id", NEW."name", NEW."notes", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."recap_doc_id_id", NEW."user_id"); RETURN NULL;', hash='a81633b312b59efc581160f28d3a0849a55c8831', operation='INSERT', pgid='pgtrigger_snapshot_insert_16674', table='favorites_favorite', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='favorite',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "favorites_favoriteevent" ("audio_id_id", "cluster_id_id", "date_created", "date_modified", "docket_id_id", "id", "name", "notes", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "recap_doc_id_id", "user_id") VALUES (NEW."audio_id_id", NEW."cluster_id_id", NEW."date_created", NEW."date_modified", NEW."docket_id_id", NEW."id", NEW."name", NEW."notes", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."recap_doc_id_id", NEW."user_id"); RETURN NULL;', hash='975aab01bd1e334cfb99f48b72f138156f5008ff', operation='UPDATE', pgid='pgtrigger_snapshot_update_dd770', table='favorites_favorite', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='prayer',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "favorites_prayerevent" ("date_created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "recap_document_id", "status", "user_id") VALUES (NEW."date_created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."recap_document_id", NEW."status", NEW."user_id"); RETURN NULL;', hash='96821b8db3f57317a614f51f61d735a30970305e', operation='INSERT', pgid='pgtrigger_snapshot_insert_9becd', table='favorites_prayer', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='prayer',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "favorites_prayerevent" ("date_created", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "recap_document_id", "status", "user_id") VALUES (NEW."date_created", NEW."id", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."recap_document_id", NEW."status", NEW."user_id"); RETURN NULL;', hash='43216b61a7ffdd9308b5e6064efd9276d791b9ec', operation='UPDATE', pgid='pgtrigger_snapshot_update_8f75d', table='favorites_prayer', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='usertag',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "favorites_usertagevent" ("date_created", "date_modified", "description", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "title", "user_id", "view_count") VALUES (NEW."date_created", NEW."date_modified", NEW."description", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."published", NEW."title", NEW."user_id", NEW."view_count"); RETURN NULL;', hash='25e8cb0a3afc62752f212bdbd2aa0e3f78be71d8', operation='INSERT', pgid='pgtrigger_snapshot_insert_38cf8', table='favorites_usertag', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='usertag',
            trigger=pgtrigger.compiler.Trigger(name='snapshot_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "favorites_usertagevent" ("date_created", "date_modified", "description", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "published", "title", "user_id", "view_count") VALUES (NEW."date_created", NEW."date_modified", NEW."description", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'snapshot\', NEW."id", NEW."published", NEW."title", NEW."user_id", NEW."view_count"); RETURN NULL;', hash='42e12700f2be7b106974dfdbed1610f1203ed9f5', operation='UPDATE', pgid='pgtrigger_snapshot_update_8ec9c', table='favorites_usertag', when='AFTER')),
        ),
        migrations.AddField(
            model_name='usertagevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='usertagevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='favorites.usertag'),
        ),
        migrations.AddField(
            model_name='usertagevent',
            name='user',
            field=models.ForeignKey(db_constraint=False, help_text='The user that created the tag', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='prayerevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='prayerevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='favorites.prayer'),
        ),
        migrations.AddField(
            model_name='prayerevent',
            name='recap_document',
            field=models.ForeignKey(db_constraint=False, help_text="The document you're praying for.", on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.recapdocument'),
        ),
        migrations.AddField(
            model_name='prayerevent',
            name='user',
            field=models.ForeignKey(db_constraint=False, help_text='The user that made the prayer', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='favoriteevent',
            name='audio_id',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='audio.audio', verbose_name='the audio file that is favorited'),
        ),
        migrations.AddField(
            model_name='favoriteevent',
            name='cluster_id',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.opinioncluster', verbose_name='the opinion cluster that is favorited'),
        ),
        migrations.AddField(
            model_name='favoriteevent',
            name='docket_id',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.docket', verbose_name='the docket that is favorited'),
        ),
        migrations.AddField(
            model_name='favoriteevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='favoriteevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='favorites.favorite'),
        ),
        migrations.AddField(
            model_name='favoriteevent',
            name='recap_doc_id',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.recapdocument', verbose_name='the RECAP document that is favorited'),
        ),
        migrations.AddField(
            model_name='favoriteevent',
            name='user',
            field=models.ForeignKey(db_constraint=False, help_text='The user that owns the favorite', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dockettagevent',
            name='docket',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='search.docket'),
        ),
        migrations.AddField(
            model_name='dockettagevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='dockettagevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='event', to='favorites.dockettag'),
        ),
        migrations.AddField(
            model_name='dockettagevent',
            name='tag',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='favorites.usertag'),
        ),
    ]
